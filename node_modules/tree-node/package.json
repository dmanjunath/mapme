{
  "name": "tree-node",
  "version": "0.2.0",
  "description": "tree node",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/brighthas/tree-node.git"
  },
  "keywords": [
    "tree",
    "node",
    "tree",
    "node"
  ],
  "author": {
    "name": "brighthas"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/brighthas/tree-node/issues"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/brighthas/tree-node",
  "dependencies": {},
  "devDependencies": {},
  "readme": "tree-node\n=========\n\ntree node link HTML Node class.\n\n\ncomponent install\n=================\n\n    component install brighthas/tree-node\n    \nNode.js install\n===============\n    \n    npm install tree-node\n    \nAPI\n===\n\n##### require\n\n    var Node = require(\"tree-node\");\n        \n##### create\n\n    var node = new Node();\n\n##### #createChild()        \n\n    var rootNode = new Node();\n    var childNode = root.createChild();\n        \n##### #getNode(childId)\n\n\treturn a node. if no return null.\n\n##### #appendChild(child)     \n\n    var rootNode = new Node();\n    var node = new Node();\n    root.appendChild(node)\n        .appendChild(new Node());\n            \n##### #removeChild(childId)\n\n    var root = new Node();\n    var node = new Node();\n    root.appendChild(node)\n        .removeChild(node.id);\n        \n##### #replaceNode(child,targetId)\n\n    var root = new Node();\n    var target = new Node();\n    var node2 = new Node();\n    \n    root.appendChild(target);\n    \n    root.replaceNode(node2,target.id);  \n\n##### #position([nodeId]))\n\n    var root = new Node();\n    root.position(); // null , root no position.\n    \n    var n1 = new Node;\n    var n2 = new Node;\n    \n    root.appendChild(n1).appendChild(n2);\n    \n    root.position(n1.id);  // 0\n    root.position(n2.id);  // 1\n    n1.position(); // 0\n    n2.position(); // 1\n        \n##### #layer([nodeId])\n\n    var root = new Node();        \n    var n1 = new Node;\n    var n2 = new Node;        \n    root.appendChild(n1).appendChild(n2);\n    \n    root.layer() // 0\n    root.layer(n1.id) // 1\n    root.layer(n2.id) // 1\n    n1.layer() // 1\n    n2.layer() // 1      \n        \n###### #top()\n \n    var root = new Node();        \n    var n1 = new Node;\n    var n2 = new Node;   \n    var n3 = new Node;\n    root.appendChild(n1).appendChild(n2).appendChild(n3);\n    \n    n1.position() // 0\n    n2.position() // 1\n    n3.position() // 2\n    \n    root.top(n3.id);\n    \n    n1.position() // 1 \n    n2.position() // 2\n    n3.position() // 0\n             \n##### #up()        \n\n    var root = new Node();        \n    var n1 = new Node;\n    var n2 = new Node;   \n    var n3 = new Node;\n    root.appendChild(n1).appendChild(n2).appendChild(n3);\n    \n    n1.position() // 0\n    n2.position() // 1\n    n3.position() // 2\n    \n    root.up(n3.id);\n    \n    n1.position() // 0 \n    n2.position() // 2\n    n3.position() // 1\n        \n##### #down()\n\n    var root = new Node();        \n    var n1 = new Node;\n    var n2 = new Node;   \n    var n3 = new Node;\n    root.appendChild(n1).appendChild(n2).appendChild(n3);\n    \n    n1.position() // 0\n    n2.position() // 1\n    n3.position() // 2\n    \n    root.up(n1.id);\n    \n    n1.position() // 1\n    n2.position() // 0\n    n3.position() // 3\n\n##### #move(movedNodeId , targetId)\n\n    var root = new Node(); \n    var n1 = new Node;\n    var n2 = new Node;        \n    root.appendChild(n1)\n        .appendChild(n2)\n        .move(n1.id,n2.id) // move n1 into n2.\n            \n##### #prevNode([nodeId]) \n         \n    var root = new Node(); \n    var n1 = new Node;\n    var n2 = new Node;        \n    root.appendChild(n1)\n        .appendChild(n2);\n    \n    n2.prevNode() === n1;  // true\n    root.prevNode(n2.id) === n1;  // true\n        \n##### #nextNode([nodeId])\n\n    var root = new Node(); \n    var n1 = new Node;\n    var n2 = new Node;        \n    root.appendChild(n1)\n        .appendChild(n2);\n        \n    n1.nextNode() === n2;  // true\n    root.nextNode(n1.id) === n2;  // true\n\n###### #isRoot  \n\n    var root = new Node(); \n    var n1 = new Node;\n    var n2 = new Node;        \n    root.appendChild(n1)\n        .appendChild(n2);\n        \n    n1.isRoot();   // false\n    root.isRoot();    // true\n        \n##### #data()\n\n    var node = new Node();\n    \n    node.data(\"name\",\"leo\")\n        .data({age:12});\n        \n    node.data(\"name\") // \"leo\" \n    node.data(\"age\") // 12\n        \n##### #json & #reborn(jsonObj)\n\n    var jsonObj = new Node().json;\n\n    var newNode = new Node;\n    newNode.reborn(jsonObj);\n        \nevents\n=======\n\n##### Event : 'child list change' \n\n    // parent is child list's parent node.\n    // parent is not necessarily the node , there may be child .\n    // childList is a Array , child ids.\n    node.on(\"child list change\",function(parent,childList){\n        ... ...\n    });\n    \n##### Event : 'add'\n\n    node.on(\"add\",function(newChild,parent){\n        ... ...\n    });\n\n##### Event : \"remove\"    \n\n    node.on(\"add\",function(removedChild,parent){\n        ... ...\n    });\n        \n##### Event : \"data change\"      \n  \n    node.on(\"add\",function(node,data){\n        ... ...\n    });\n\n### LICENSE\n    \n    MIT , brighthas@gmail.com\n",
  "readmeFilename": "README.md",
  "_id": "tree-node@0.2.0",
  "dist": {
    "shasum": "f5567bcdeb81e552c8785d8bc19238868ffa7929"
  },
  "_from": "tree-node@",
  "_resolved": "https://registry.npmjs.org/tree-node/-/tree-node-0.2.0.tgz"
}
